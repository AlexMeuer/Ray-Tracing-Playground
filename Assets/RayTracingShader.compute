#pragma kernel main

RWTexture2D<float4> result;
float4x4 camera_to_world;
float4x4 camera_inverse_projection;
Texture2D<float4> skybox_texture;
SamplerState sampler_skybox_texture;
float2 pixel_offset;
int ray_bounces;
float4 directional_light;
static const float pi = 3.14159265f;

struct sphere
{
    float3 position;
    float radius;
    float3 albedo;
    float3 specular;
};
uint num_spheres;
StructuredBuffer<sphere> spheres;

struct ray
{
    float3 origin;
    float3 direction;
    float3 energy;
};

struct ray_hit
{
    float3 position;
    float distance;
    float3 normal;
    float3 albedo;
    float3 specular;
};

ray create_ray(const float3 origin, const float3 direction)
{
    ray ray;
    ray.origin = origin;
    ray.direction = direction;
    ray.energy = float3(1.0f, 1.0f, 1.0f);
    return ray;
}

ray_hit create_ray_hit()
{
    ray_hit hit;
    hit.position = float3(0.0f, 0.0f, 0.0f);
    hit.distance = 1.#INF;
    hit.normal = float3(0.0f, 0.0f, 0.0f);
    hit.albedo = float3(0.0f, 0.0f, 0.0f);
    hit.specular = float3(0.0f, 0.0f, 0.0f);
    return hit;
}

ray create_camera_ray(float2 uv)
{
    // Transform the camera origin to world space
    const float3 origin = mul(camera_to_world, float4(0.0f, 0.0f, 0.0f, 1.0f)).xyz;
    
    // Invert the perspective projection of the view-space position
    float3 direction = mul(camera_inverse_projection, float4(uv, 0.0f, 1.0f)).xyz;
    // Transform the direction from camera to world space and normalize
    direction = mul(camera_to_world, float4(direction, 0.0f)).xyz;
    direction = normalize(direction);

    return create_ray(origin, direction);
}

void intersect_ground_plane(ray ray, inout ray_hit best_hit)
{
    // Calculate distance along the ray where the ground plane intersected.
    const float t = -ray.origin.y / ray.direction.y;
    if (t > 0 && t < best_hit.distance)
    {
        best_hit.distance = t;
        best_hit.position = ray.origin + t * ray.direction;
        best_hit.normal = float3(0.0f, 1.0f, 0.0f);
        best_hit.albedo = float3(0.4f, 0.4f, 0.4f);
        best_hit.specular = float3(0.06f, 0.06f, 0.06f);
    }
}

void intersect_sphere(const ray ray, inout ray_hit best_hit, const sphere sphere)
{
    // Calculate distance along the ray where the sphere is intersected
    const float3 d = ray.origin - sphere.position;
    const float p1 = -dot(ray.direction, d);
    const float p2_sqr = p1 * p1 - dot(d, d) + sphere.radius * sphere.radius;
    if (p2_sqr < 0)
        return;
    const float p2 = sqrt(p2_sqr);
    const float t = p1 - p2 > 0 ? p1 - p2 : p1 + p2;
    if (t > 0 && t < best_hit.distance)
    {
        best_hit.distance = t;
        best_hit.position = ray.origin + t * ray.direction;
        best_hit.normal = normalize(best_hit.position - sphere.position);
        best_hit.albedo = sphere.albedo;
        best_hit.specular = sphere.specular;
    }
}

ray_hit trace(const ray ray)
{
    ray_hit best_hit = create_ray_hit();
    intersect_ground_plane(ray, best_hit);
    
    // Size query not supported on Metal (mac).
    // uint num_spheres, stride;
    // spheres.GetDimensions(num_spheres, stride);
    
    for (uint i = 0; i < num_spheres; i++)
        intersect_sphere(ray, best_hit, spheres[i]);
    
    return best_hit;
}

float3 shade(inout ray main_ray, const ray_hit hit)
{
    if (hit.distance < 1.#INF)
    {
        // Reflect the ray and multiply energy with specular reflection
        main_ray.origin = hit.position + hit.normal * 0.001f;
        main_ray.direction = reflect(main_ray.direction, hit.normal);
        main_ray.energy *= hit.specular;
        
        // Shadow test ray
        const ray shadow_ray = create_ray(hit.position + hit.normal * 0.001f, -1 * directional_light.xyz);
        const ray_hit shadow_hit = trace(shadow_ray);
        if (shadow_hit.distance != 1.#INF)
        {
            return float3(0.0f, 0.0f, 0.0f);
        }

        // Diffuse
        return saturate(dot(hit.normal, directional_light.xyz) * -1) * directional_light.w * hit.albedo;
    } else
    {
        // Erase the ray's energy - the sky doesn't reflect
        main_ray.energy = 0.0f;
        
        // Sample the skybox and write it
        float theta = acos(main_ray.direction.y) / -pi;
        float phi = atan2(main_ray.direction.x, -main_ray.direction.z) / -pi * 0.5f;
        return skybox_texture.SampleLevel(sampler_skybox_texture, float2(phi, theta), 0).xyz * 1.8f;
    }
}

[numthreads(8,8,1)]
void main (uint3 id : SV_DispatchThreadID)
{
    // Get the dimensions of the RenderTexture
    uint width, height;
    result.GetDimensions(width, height);

    // Transform pixel to [-1,1] range
    const float2 uv = float2((id.xy + pixel_offset) / float2(width, height) * 2.0f - 1.0f);

    // Get a ray for the UVs
    ray ray = create_camera_ray(uv);

    // Trace and shade
    float3 col = float3(0, 0, 0);
    for (int i = 0; i < ray_bounces; i++)
    {
        ray_hit hit = trace(ray);
        col += ray.energy * shade(ray, hit);

        if (!any(ray.energy))
            break;
    }
    result[id.xy] = float4(col, 1);
}